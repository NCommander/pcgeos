/***********************************************************************
 *
 *	Copyright (c) Geoworks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  ffDatabaseFloatController.goc
 * FILE:	  ffDatabaseFloatController.goc
 *
 * AUTHOR:  	  Jeremy Dashe : Nov 23, 1992
 *
 * DESCRIPTION:
 *	This file contains method handlers that deal with float
 *	controllers used with the flat file database library.
 *
 * RCS STAMP:
 *	$Id: ffDatabaseFloatController.goc,v 1.1 97/04/04 18:02:55 newdeal Exp $
 *
 ***********************************************************************/

@include <stdapp.goh>
#include <geoworks.h>

@include <Objects/FlatFile/ffileC.goh>
@include <math.goh>
@include <grobj.goh>
#include <Database/ffDExtrn.h>
#include <ffFatal.h>

/***********************************************************************
			 Forward Declarations
 ***********************************************************************/

void FFDResetFieldTypesInLayout(optr oself,
				byte layoutNum,
				FormatIdType formatToReset);

void FFDFloatNotifyFormatListChange(optr oself, FormatIdType formatIdToken);

/***********************************************************************
 *
 * MESSAGE:	MSG_FLOAT_CTRL_REQUEST_MONIKER for FlatFileDatabaseClass
 *
 * DESCRIPTION:	This method calls utility routines in the float
 *	    	library that specifically deal with its context.
 *
 * PARAMETERS:
 *	void (MemHandle formatInfoStrucHan);
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/23/92	Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FLOAT_CTRL_REQUEST_MONIKER
{
    FormatInfoStruc *fis;
    optr listOptr;
    
    /*
     * Let the library util functions deal with it.
     */
    fis = MemLock(formatInfoStrucHan);
    fis->FIS_userDefFmtArrayFileHan = pself->documentHandle;
    fis->FIS_userDefFmtArrayBlkHan = pself->FFI_floatControlBlock;

    (void) FloatFormatGetFormatParamsWithListEntry(fis);

    /*
     * Well, we have some work to do after all.
     * Fill the indicated moniker with the just-filled text.
     */
    listOptr = ConstructOptr(fis->FIS_childBlk, fis->FIS_chooseFmtListChunk);
    @call listOptr::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
					      fis->FIS_curSelection,
					      fis->FIS_curParams.FP_formatName);

    MemFree(formatInfoStrucHan);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FLOAT_CTRL_UPDATE_UI for FlatFileDatabaseClass
 *
 * DESCRIPTION:	This method calls utility routines in the float
 *	    	library that specifically deal with its context.
 *
 * PARAMETERS:
 *	void (MemHandle formatInfoStrucHan);
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/23/92	Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FLOAT_CTRL_UPDATE_UI
{
    FormatInfoStruc *fis;

    /*
     * Let the library util functions deal with it.
     */
    fis = MemLock(formatInfoStrucHan);
    fis->FIS_userDefFmtArrayFileHan = pself->documentHandle;
    fis->FIS_userDefFmtArrayBlkHan = pself->FFI_floatControlBlock;

    FloatFormatInitFormatList(fis);

    MemFree(formatInfoStrucHan);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FLOAT_CTRL_FORMAT_SELECTED
 *
 * DESCRIPTION:	This method calls utility routines in the float
 *	    	library that specifically deal with its context.
 *
 * PARAMETERS:
 *	void (MemHandle formatInfoStrucHan);
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/23/92	Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FLOAT_CTRL_FORMAT_SELECTED
{
    FormatInfoStruc *fis;

    /*
     * Let the library util functions deal with it.
     */
    fis = MemLock(formatInfoStrucHan);
    fis->FIS_userDefFmtArrayFileHan = pself->documentHandle;
    fis->FIS_userDefFmtArrayBlkHan = pself->FFI_floatControlBlock;

    FloatFormatProcessFormatSelected(fis);

    MemFree(formatInfoStrucHan);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FLOAT_CTRL_USER_DEF_INVOKE
 *
 * DESCRIPTION:	This method calls utility routines in the float
 *	    	library that specifically deal with its context.
 *
 * PARAMETERS:
 *	void (MemHandle formatInfoStrucHan);
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/23/92	Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FLOAT_CTRL_USER_DEF_INVOKE
{
    FormatInfoStruc *fis;

    /*
     * Let the library util functions deal with it.
     */
    fis = MemLock(formatInfoStrucHan);
    fis->FIS_userDefFmtArrayFileHan = pself->documentHandle;
    fis->FIS_userDefFmtArrayBlkHan = pself->FFI_floatControlBlock;

    (void) FloatFormatGetFormatParamsWithListEntry(fis);

    /* 
     * A new format can be created only if there is an
     * existing one selected that can be used as a template. 
     */
    if (fis->FIS_curSelection != FORMAT_ID_INDETERMINATE) 
	FloatFormatInvokeUserDefDB(fis);

    MemUnlock(formatInfoStrucHan);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FLOAT_CTRL_USER_DEF_OK
 *
 * DESCRIPTION:	This method calls utility routines in the float
 *	    	library that specifically deal with its context.
 *
 * PARAMETERS:
 *	void (MemHandle formatInfoStrucHan);
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/23/92	Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FLOAT_CTRL_USER_DEF_OK
{
    FormatInfoStruc *fis;
    FormatIdType idToken;

    /*
     * Let the library util functions deal with it.
     */
    fis = MemLock(formatInfoStrucHan);
    fis->FIS_userDefFmtArrayFileHan = pself->documentHandle;
    fis->FIS_userDefFmtArrayBlkHan = pself->FFI_floatControlBlock;
    idToken = fis->FIS_curToken;

    if (FloatFormatUserDefOK(fis)) {
	MemUnlock(formatInfoStrucHan);
    } else {
	MemFree(formatInfoStrucHan);
    }

    /*
     * Tell the controller to get that exciting, new look.
     */
    FFDFloatNotifyFormatListChange(oself, idToken);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FLOAT_CTRL_FORMAT_DELETE
 *
 * DESCRIPTION:	This method calls utility routines in the float
 *	    	library that specifically deal with its context.
 *
 * PARAMETERS:
 *	void (MemHandle formatInfoStrucHan);
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/23/92	Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FLOAT_CTRL_FORMAT_DELETE
{
    FormatInfoStruc *fis;
    FormatIdType formatToReset;
    byte i, layoutNum, layoutIndex;

    /*
     * Let the library util functions deal with it.
     */
    fis = MemLock(formatInfoStrucHan);
    fis->FIS_userDefFmtArrayFileHan = pself->documentHandle;
    fis->FIS_userDefFmtArrayBlkHan = pself->FFI_floatControlBlock;

    (void) FloatFormatGetFormatParamsWithListEntry(fis);
    formatToReset = FloatFormatDelete(fis);

    MemFree(formatInfoStrucHan);

    /*
     * If nothing was deleted, we're done.
     */
    if (formatToReset == FORMAT_ID_INDETERMINATE) {
	return;
    }

    /*
     * Tell the controller to get that exciting, new look.
     */
    FFDFloatNotifyFormatListChange(oself, FORMAT_ID_GENERAL);
    
    /*
     * Loop through every layout, resetting every field with the deleted
     * type to be "General".
     */
    layoutIndex = 1;	/* Start at one; it can never be 0, because the
				layout names are stored in column 0 */

    pself = ObjDerefGen(oself);
    for (i = 0; i < pself->FFI_numLayouts; i++) {
        layoutNum = 0;	
	while (layoutNum == 0) {
	    if (pself->FFI_layoutColumnsTaken[layoutIndex/8] & 
				(0x80 >> (layoutIndex % 8))) {
		layoutNum = layoutIndex;
	    }
	    layoutIndex++;
 	}

	FFDResetFieldTypesInLayout(oself, layoutNum, formatToReset);
	pself = ObjDerefGen(oself);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FLOAT_CTRL_FORMAT_APPLY
 *
 * DESCRIPTION:	This method calls utility routines in the float
 *	    	library that specifically deal with its context.
 *
 * PARAMETERS:
 *	void (MemHandle formatInfoStrucHan);
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/23/92	Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FLOAT_CTRL_FORMAT_APPLY
{
    FormatInfoStruc *fis;
    FormatIdType format;
    optr grobjBody;
    word empty;

    /*
     * Let the library util functions deal with it.
     */
    fis = MemLock(formatInfoStrucHan);
    fis->FIS_userDefFmtArrayFileHan = pself->documentHandle;
    fis->FIS_userDefFmtArrayBlkHan = pself->FFI_floatControlBlock;

    format = FloatFormatGetFormatParamsWithListEntry(fis);

    MemFree(formatInfoStrucHan);

    /*
     * Tell every selected field to change its format.
     */
    grobjBody = FFDGetCurrentLayoutGrObjBody(oself,
					     pself->FFI_currentLayoutType);

    GrObjBodyProcessSelectedGrObjsCommon(
	    grobjBody, MSG_FFTFG_SET_DISPLAY_FORMAT, format,
	    0, 0, &empty, &empty, &empty, &empty);
}


/***********************************************************************
 *
 * FUNCTION:	FFDResetFieldTypesInLayout
 *
 * DESCRIPTION:	This function loops through all of the fields in a
 *	    	layout and resets any that match the passed format id
 *	    	to be FORMAT_ID_GENERAL.
 *
 * PARAMETERS:	oself - an optr to the current database
 *	    	layoutNum - the layout number in which to make the change.
 *	    	formatToReset - the format to replace.
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	12/ 2/92	Initial version
 *
 ***********************************************************************/
void
FFDResetFieldTypesInLayout(optr oself,
			   byte layoutNum,
			   FormatIdType formatToReset)
{
    RecordLayoutChunkArrayHeader *cellDataPtr;
    CellRef cellOptr;
    int i;
    RecordLayoutChunkArrayElement *currentIndexElement;
    MemHandle grObjectMemBlock;
    optr grObjectOptr;
    FlatFileDatabaseInstance *pself = ObjDerefGen(oself);

    /*
     * First, retrieve the record layout chunk array.
     */
    cellDataPtr = CellLockGetRef(&pself->SSI_cellParams,
				 RECORD_LAYOUT_ROW, 
				 layoutNum,
				 &cellOptr);
#if ERROR_CHECK
    if (!cellDataPtr) {
	EC_ERROR(CELL_DOES_NOT_EXIST);
    }
#endif /* ERROR_CHECK */

    /*
     * Now loop through the fields in the layout, telling them all
     * to reset themselves if need be.
     */
    for (i = 0; i < cellDataPtr->RLCAH_numFieldsInLayout; i++) {
	/*
	 * Get a pointer to this element
	 */
	currentIndexElement = ChunkArrayElementToPtr(cellOptr, i, (word *) 0); 

	/*
	 * Get the field'd guardian optr.
	 */
	grObjectMemBlock = VMVMBlockToMemBlock(pself->documentHandle, 
				    currentIndexElement->GOEOP_grObjectVMBlock);

	grObjectOptr = ConstructOptr(grObjectMemBlock, 
				     currentIndexElement->GOEOP_grObjectChunk);

	/*
	 * Tell the guardian to reset its field's type if necessary.
	 */
	@call grObjectOptr::MSG_FFTFG_RESET_DEFINED_TYPE(formatToReset,
							 FORMAT_ID_GENERAL);
    }

    /*
     * Let the record layout chunk array go.
     */
    CellUnlock(cellDataPtr);
}


/***********************************************************************
 *
 * MESSAGE:	MSG_FFD_DISPLAY_USER_DEFINED_FORMAT for FlatFileDatabaseClass
 *
 * DESCRIPTION:	This message formats a float number to a user defined format.
 *	    	Pass a pointer to the text buffer to be filled with the
 *	    	formatted number, a pointer to the number, and the display
 *	    	format.
 *
 * PARAMETERS:
 *	void (TCHAR *fieldText,
 *	      FloatNum *floatNum,
 *	      FormatIdType displayFormat)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	12/ 2/92	Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FFD_DISPLAY_USER_DEFINED_FORMAT
{
    FloatFormatNumber(displayFormat,
		      pself->FFI_floatControlBlock,
		      pself->documentHandle,
		      floatNum,
		      fieldText);
}

/***********************************************************************
 *
 * FUNCTION:	FFDFloatNotifyFormatListChange
 *
 * DESCRIPTION:	This function is called to send a notification to the
 *	    	float controllers out there that the format list has
 *	    	changed.
 *
 * PARAMETERS:	oself - an optr to the current database
 *	    	formatIdToken - the format id token to highlight.
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	3/10/93		Initial version
 *
 ***********************************************************************/
void
FFDFloatNotifyFormatListChange(optr oself, FormatIdType formatIdToken)
{
    EventHandle msg;
    MemHandle ffcHandleForInit, ffcHandleForChange;

    /*
     * Create the notification blocks, and ask the database to load them
     * up.
     */
    ffcHandleForInit = MemAlloc(sizeof(NotifyFloatFormatChange),
				HF_SWAPABLE | HF_SHARABLE, HAF_NO_ERR);
    @call oself::MSG_FFD_LOAD_FLOAT_FORMAT_BLOCK(ffcHandleForInit,
						 formatIdToken);

    ffcHandleForChange = MemAlloc(sizeof(NotifyFloatFormatChange),
				  HF_SWAPABLE | HF_SHARABLE, HAF_NO_ERR);
    @call oself::MSG_FFD_LOAD_FLOAT_FORMAT_BLOCK(ffcHandleForChange,
						 formatIdToken);

    /*
     * Send off the initialization to the float controller.
     */
    msg = @record (optr) NullClass::MSG_META_NOTIFY_WITH_DATA_BLOCK(
		      MANUFACTURER_ID_GEOWORKS, /* Manufacturer's ID */
    	    	      GWNT_FLOAT_FORMAT_INIT,   /* Manufacturer's list type */
    	    	      ffcHandleForInit);    	/* Handle of data block */

    @call GeodeGetAppObject(0)::MSG_META_GCN_LIST_SEND(
    		      (word) GCNLSF_SET_STATUS, /* GCNListSendFlags */
    		      (EventHandle) msg,        /* Handle to classed event */
    		      (MemHandle) ffcHandleForInit,
						/* Handle of extra data block */
		      (word) GAGCNLT_FLOAT_FORMAT_INIT,
    	    	    	    	    	        /* Manufacturer's list type */
    		      (word) MANUFACTURER_ID_GEOWORKS);
    	    	    	    	    	        /* Manufacturer's ID */

    /*
     * Send off the change notification to the float controller.
     */
    msg = @record (optr) NullClass::MSG_META_NOTIFY_WITH_DATA_BLOCK(
		      MANUFACTURER_ID_GEOWORKS, /* Manufacturer's ID */
    	    	      GWNT_FLOAT_FORMAT_CHANGE, /* Manufacturer's list type */
    	    	      ffcHandleForChange);    	/* Handle of data block */

    @call GeodeGetAppObject(0)::MSG_META_GCN_LIST_SEND(
    		      (word) GCNLSF_SET_STATUS, /* GCNListSendFlags */
    		      (EventHandle) msg,        /* Handle to classed event */
    		      (MemHandle) ffcHandleForChange,
						/* Handle of extra data block */
		      (word) GAGCNLT_FLOAT_FORMAT_CHANGE,
    	    	    	    	    	        /* Manufacturer's list type */
    		      (word) MANUFACTURER_ID_GEOWORKS);
    	    	    	    	    	        /* Manufacturer's ID */
}
