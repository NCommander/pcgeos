/***********************************************************************
 *
 *	Copyright (c) Geoworks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  ffDatabasePaste.goc
 * FILE:	  ffDatabasePaste.goc
 *
 * AUTHOR:  	  Jeremy Dashe : Aug 12, 1992
 *
 * DESCRIPTION:
 *	This file contains code to deal with pasting fields into a
 *	flat file database.
 *
 * RCS STAMP:
 *	$Id: ffDatabasePaste.goc,v 1.1 97/04/04 18:02:54 newdeal Exp $
 *
 ***********************************************************************/


@include <stdapp.goh>
#include <geoworks.h>
#include <system.h>

#include <Ansi/string.h>

@include <ffile.goh>
@include <Objects/FlatFile/ffileC.goh>
#include <ffFatal.h>


/***********************************************************************
			External Declarations
 ***********************************************************************/

#include <Database/ffDExtrn.h>

@extern	chunk @FFWillNotHookUpPastedFieldsString;
@extern	chunk @FFAboutToNukePastedFieldString;

/***********************************************************************
			 Forward Declarations
 ***********************************************************************/

FieldID FFDDuplicateField(optr oself, FieldID originalColNum);

void FFDStoreLayoutFieldOrder(optr oself);

/***********************************************************************
				 Code
 ***********************************************************************/


/***********************************************************************
 *
 * FUNCTION:	FFDDuplicateField
 *
 * DESCRIPTION:	This function creates a new field that matches an 
 *	        existing field's type and attributes.  The new field's
 *	    	name is based on the original field.  The new field's
 *	    	column number (FieldID) is returned.
 *
 *	    	If the source field is a computed field, the function
 *	    	token stream is duplicated and the fields it depends
 *	    	on are told of the new dependency.
 *
 *	    	If a new field could not be created for some reason, -1
 *	    	is returned.
 *
 * PARAMETERS:	oself - an optr to the current database
 *	    	originalColNum - the FieldID of the field to copy
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	8/13/92		Initial version
 *
 ***********************************************************************/
FieldID
FFDDuplicateField(optr oself, FieldID originalColNum)
{
    FlatFileDatabaseInstance *pself;
    TCHAR originalName[MAX_FIELD_NAME_LENGTH + 1];
    TCHAR newName[MAX_FIELD_NAME_LENGTH + 1];
    FieldID newColNum;
    word newTokenNum;
    FieldDataType dataType;
    FFFieldCreationResult errorValue;
    void *originalCellData, *newCellData;
    MemHandle nCDHandle;
    word cellDataSize;
    word newFormulaSize;
    FieldDataTypesFlags flags;

    /*
     * Get the name and type of the original field.
     */
    FFDGetColumnFieldName(oself, (word) originalColNum, originalName);
    dataType = FFDGetDataTypeAndFlags(oself, originalColNum, &flags);

    /*
     * Get a new, unique name for the new field.
     */
    if (!@call oself::MSG_FFD_REQUEST_UNIQUE_FIELD_NAME((optr) 0,
							originalName,
						       	newName)) {
	/*
	 * A unique name couldn't be created.  Bail.
	 */
	return (-1);
    }

    /*
     * Attempt to store the new field name.
     */
    newTokenNum = StoreNewFieldName(newName, oself, &newColNum, &errorValue);
    if (newTokenNum == (word) -1) {
	/*
	 * There are too many fields already.  Bail.
	 */
	return (-1);
    }

    /*
     * Alert the world that a new field has been created.
     */
    pself = ObjDerefGen(oself);
    SendWholeListNotification (oself, newColNum,
			       ADDED, pself->FFI_numFields);

    /*
     * Copy the source field's type, attributes, etc.
     *
     * First, get the original field's attributes and type.
     */
    pself = ObjDerefGen(oself);
    originalCellData = CellLock(&pself->SSI_cellParams,
				FIELD_TYPE_ROW,
				originalColNum);
    cellDataSize = LMemGetChunkSizePtr(originalCellData);

    /*
     * Allocate a temp buffer for the cell type data.
     */
    nCDHandle = MemAlloc(cellDataSize, HF_SHARABLE | HF_SWAPABLE, HAF_NO_ERR);
    newCellData = MemLock(nCDHandle);
    memcpy(newCellData, originalCellData, cellDataSize);
    CellUnlock(originalCellData);

    /*
     * Everything is the same except for the token number.
     */
    ((FieldDataAttrs *)newCellData)->FDA_nameToken = newTokenNum;

    /*
     * Add the new type and attributes cell!
     */
    pself = ObjDerefGen(oself);
    CellReplace(&pself->SSI_cellParams,
		FIELD_TYPE_ROW, 
		(word) newColNum,
		newCellData,
		cellDataSize);
    MemFree(nCDHandle);

    /*
     * Copy the cell's default/expression token stream.
     */
    pself = ObjDerefGen(oself);
    originalCellData = CellLock(&pself->SSI_cellParams,
				FIELD_DEFAULT_VALUE_ROW,
				originalColNum);
    cellDataSize = LMemGetChunkSizePtr(originalCellData);

    /*
     * Allocate a temp buffer for the token stream.
     */
    nCDHandle = MemAlloc(cellDataSize,
			      HF_SHARABLE | HF_SWAPABLE, HAF_NO_ERR);
    newCellData = MemLock(nCDHandle);
    memcpy(newCellData, originalCellData, cellDataSize);
    CellUnlock(originalCellData);
	
    /*
     * Clear the dependency field: no-one can possibly depend on us at this
     * instant.
     */
    ((CellCommon *)newCellData)->CC_dependencies = 0;

    /*
     * Remember how big its expression/default value expression is.
     */
    newFormulaSize = ((CellFormula *)newCellData)->CF_formulaSize;
    
    /*
     * Add the new type and attributes cell!
     */
    pself = ObjDerefGen(oself);
    CellReplace(&pself->SSI_cellParams,
		FIELD_DEFAULT_VALUE_ROW,
		(word) newColNum,
		newCellData,
		cellDataSize);
    MemFree(nCDHandle);

    /*
     * If the field is a computed field, alert the fields it depends upon.
     * Else, alert the fields its default expression might depend upon --
     * if it has a default formula.
     */
    if (dataType == FDT_COMPUTED) {
	FFDSetDependencies(oself, newColNum);
    } else if (newFormulaSize != 0) {
	SpreadsheetCellAddRemoveDeps((SpreadsheetInstance *)pself,
				     (dword) &(pself->SSI_cellParams),
				     FFDParseLibraryCallback,
				     (word) 0,
				     (word) EF_MAKE_DEPENDENCIES,
				     (word) FIELD_DEFAULT_VALUE_ROW,
				     (word) newColNum,
				     (word) FIELD_DEFAULT_VALUE_ROW,
				     (word) pself->SSI_maxCol);
    }	

    /* Done.  Signal success. */
    return newColNum;
}


/***********************************************************************
 *
 * MESSAGE:	MSG_FFD_NOTIFY_CLIPBOARD_PASTE for FlatFileDatabaseClass
 *
 * DESCRIPTION:	This message is sent when objects have been pasted
 *	    	into from the clipboard into a GrObj body.
 *
 *	    	If fields have been pasted into the single record
 *	    	layout, we attempt to hook them up to the database by
 *	    	loading them into the current layout, or duplicating
 *	    	them if they are already in the current layout.
 *
 *	    	If fields have been pasted into a multi-record layout,
 *	    	then the user is warned that they won't be hooked up.
 *
 * PARAMETERS:
 *	void (optr grObjBody)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	9/22/92		Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FFD_NOTIFY_CLIPBOARD_PASTE
{
    optr srBody;
    word fieldCount;
    word empty;
    TCHAR *warningMsg;
    MemHandle labelArrayHandle;
    LabelIDArray *labelArray;

    /*
     * First, check to see if the passed GrObjBody optr is the single
     * record layout or the multi-record layout.
     */
    srBody = FFDGetCurrentLayoutGrObjBody(oself, LT_SINGLE_RECORD);

    if (grObjBody != srBody) {
	/*
	 * Well, it's a different GrObj Body than our single record body.
	 * Are there any fields that have been pasted?
	 *
	 * The following call sends the MSG_FFTFG_PING message to all
	 * of the selected (== just pasted) objects in the body with
	 * the address of the ping flag in cx:dx.  Nothing is in bp, and
	 * no return values are expected (but we still need a place to
	 * put the ignored return values).
	 */

	fieldCount = 0;
	GrObjBodyProcessSelectedGrObjsCommon(
	    grObjBody, MSG_FFTFG_PING, PtrToSegment(&fieldCount),
	    PtrToOffset(&fieldCount), 0, &empty, &empty, &empty, &empty);

	if (fieldCount) {
	    /*
	     * There were some fields pasted.  Send up a warning that
	     * they won't be hooked up.
	     */
	    MemLock (OptrToHandle (@FFWillNotHookUpPastedFieldsString));
	    warningMsg = LMemDeref (@FFWillNotHookUpPastedFieldsString);

	    UserStandardDialog(
	    	(TCHAR *)0,
		/* not GIT_MULTIPLE_RESPONSE, so no custom triggers  */
                (TCHAR *)0,
                /* No string arguments. */
                (TCHAR *)0, (TCHAR *)0,
                /* dialog string */
                (TCHAR *)warningMsg,
                /* dialog type */
                (CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
                /* interaction type */
                (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));
	    
	    /* Get rid of the string block. */
	    MemUnlock (OptrToHandle (@FFWillNotHookUpPastedFieldsString));
	}
    } else {
	/*
	 * We're pasting into a single record layout.  Attempt to
	 * hook up the new fields into the database.
	 */
	labelArrayHandle = MemAlloc(sizeof(LabelIDArray),
			       HF_SHARABLE | HF_SWAPABLE, HAF_NO_ERR);
	labelArray = MemLock(labelArrayHandle);
	labelArray->databaseOptr = oself;
	labelArray->numLabels = 0;

	/*
	 * First, call all field labels and tell them to add
	 * themselves to the labelArray.
	 */
	GrObjBodyProcessSelectedGrObjsCommon(
	    grObjBody, MSG_FFLG_PASTE_ALERT, PtrToSegment(labelArray),
	    PtrToOffset(labelArray), 0, &empty, &empty, &empty, &empty);

	/*
	 * Now tell all the fields to add themselves to the database
	 * and to hook themselves up to their labels.
	 */
	GrObjBodyProcessSelectedGrObjsCommon(
	    grObjBody, MSG_FFTFG_PASTE_ALERT, PtrToSegment(labelArray),
	    PtrToOffset(labelArray), 0, &empty, &empty, &empty, &empty);

	/*
	 * Done.  Free up the label array structure.
	 */
	MemFree(labelArrayHandle);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFD_ADD_PASTED_FIELD_TO_LAYOUT for FlatFileDatabaseClass
 *
 * DESCRIPTION: This message is called by field guardian GrObjects
 *	    	that have been pasted into a layout, and want to let
 *	    	the database know about it.
 *
 *	 	The column number indicates which field of the current
 *	    	database this object is supposed to represent.  If the
 *	    	field is not yet in the current layout, the new
 *	    	GrObject will represent it.  If the field is already
 *	    	in the current layout, a new field created in the
 *	    	database that has all the same attributes as the
 *	    	original, and is named with
 *	    	MSG_FFD_REQUEST_UNIQUE_FIELD_NAME using the original
 *	    	field name as the name candidate.
 *
 * PARAMETERS:
 *	void (optr guardianOptr, optr labelOptr, FieldID colNum)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	8/12/92		Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FFD_ADD_PASTED_FIELD_TO_LAYOUT
{
    FieldID newColNum;
    FieldListID newIndex;
    TCHAR *warningMsg;

    /*
     * First check to see if the field has a legal id.  If not,
     * warn the user that it will not be a real field.
     */
    if (colNum >= pself->FFI_numFields) {
	/*
	 * This is an illegal field.  Tell the user we're about to nuke it.
	 */
	MemLock (OptrToHandle (@FFAboutToNukePastedFieldString));
	warningMsg = LMemDeref (@FFAboutToNukePastedFieldString);

	UserStandardDialog(
	    	(TCHAR *)0,
		/* not GIT_MULTIPLE_RESPONSE, so no custom triggers  */
                (TCHAR *)0,
                /* No string arguments. */
                (TCHAR *)0, (TCHAR *)0,
                /* dialog string */
                warningMsg,
                /* dialog type */
                (CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
                /* interaction type */
                (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));
	    
	/* Get rid of the string block. */
	MemUnlock (OptrToHandle(@FFAboutToNukePastedFieldString));

	/*
	 * Tell the field to nuke itself, then leave.
	 */
	@call guardianOptr::MSG_FFTFG_NUKE_FIELD();
	return;
    }
    
    /*
     * See if this field is already in the current layout.
     */
    if (FindFieldListElement
		(pself->FFI_layoutNameList, colNum,
		 pself->FFI_numInLayoutNameList) == (FieldListID) -1) {
	/*
	 * The field is not in the current layout.  Remove it from the
	 * not_in_layout_list, add it to the layout,  and update the
	 * layout's GrObj chunk array.
	 */
	newColNum = colNum;
	@call oself::MSG_FFD_DELETE_NAME_FROM_NOT_IN_LAYOUT_LIST(newColNum);
    } else {
	/*
	 * The field is already in the current layout.  Create a new
	 * field in the database for it.  If the field is a computed
	 * expression, update the dependencies of the fields it
	 * depends on.
	 */
	newColNum = FFDDuplicateField(oself, colNum);

	if (newColNum == (FieldID) -1) {
	    /*
	     * The field couldn't be duplicated for some reason.  Leave.
	     */
	    return;
	}
    }

    /*
     * At this point, newColNum points to the field we want to add to
     * the current layout.  Now add the field and the already-existing
     * GrObjects to the layout, and tell the field navigation list
     * that we're new.
     */
    newIndex = FFDAddFieldNameToLayoutListAndTellControllers(newColNum, oself);
    @call oself::MSG_FFD_ADD_EXISTING_GROBJ_TO_LAYOUT(newIndex,
						      guardianOptr,
						      labelOptr);

    @send oself::MSG_FFD_FNO_INFO_ADD_ITEM(newColNum);
    FFDStoreLayoutFieldOrder(oself);
}

